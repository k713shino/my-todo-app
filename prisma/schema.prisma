generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl", "debian-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "foreignKeys"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  savedSearches SavedSearch[]
  searchHistory SearchHistory[]
  sessions      Session[]
  todos         Todo[]
  timeEntries   TimeEntry[]
  timeGoal      TimeGoal?

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      Status    @default(TODO)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    String?
  tags        String[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // サブタスク関係
  parentId    String?   // 親タスクのID（サブタスクの場合）
  parent      Todo?     @relation("TodoSubtasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks    Todo[]    @relation("TodoSubtasks")

  // 外部連携用ID（重複検知用）
  externalId     String?
  externalSource String? // 例: 'slack', 'github', 'email'

  // 時間追跡関係
  timeEntries TimeEntry[]

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([parentId])
  @@index([externalId])
  @@unique([userId, externalSource, externalId])
  @@map("todos")
}

model SavedSearch {
  id        String   @id @default(cuid())
  name      String
  filters   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_searches")
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  filters   String
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
  @@map("search_history")
}

// 時間追跡エントリー
model TimeEntry {
  id          String          @id @default(cuid())
  userId      String
  todoId      String?         // 関連するタスク（任意）
  startedAt   DateTime
  endedAt     DateTime?       // 進行中の場合はnull
  duration    Int?            // 終了時に計算される秒数
  description String?         // メモや詳細
  category    String?         // 作業カテゴリ
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // リレーション
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  todo        Todo?           @relation(fields: [todoId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([todoId])
  @@index([startedAt])
  @@index([userId, startedAt])
  @@index([userId, todoId])
  @@map("time_entries")
}

// 時間追跡の目標設定
model TimeGoal {
  id              String          @id @default(cuid())
  userId          String          @unique
  dailyGoal       Int             @default(480)  // 分単位（デフォルト8時間）
  weeklyGoal      Int             @default(2400) // 分単位（デフォルト40時間）
  monthlyGoal     Int             @default(10080) // 分単位（デフォルト168時間）
  
  // 通知設定
  dailyReminder   Boolean         @default(true)
  progressAlert   Boolean         @default(true)
  goalAchieved    Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // リレーション
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_goals")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}
