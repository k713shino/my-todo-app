/**
 * üöÄ È´òÈÄü„É¶„Éº„Ç∂„ÉºÂ∞ÇÁî®TodoÂèñÂæóAPI
 * LambdaÈñ¢Êï∞„ÅÆÊúÄÈÅ©Âåñ„Åï„Çå„Åü„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Çí‰ΩøÁî®
 */

import { NextRequest, NextResponse } from 'next/server'
import { getAuthenticatedUser, createAuthErrorResponse } from '@/lib/auth-utils'
import { CacheManager } from '@/lib/cache'
import { lambdaAPI } from '@/lib/lambda-api'
import { createSecurityHeaders } from '@/lib/security'
import { extractUserIdFromPrefixed } from '@/lib/user-id-utils'

export async function GET(request: NextRequest) {
  const startTime = performance.now()
  const authResult = await getAuthenticatedUser(request)
  
  if (!authResult.success || !authResult.user) {
    return createAuthErrorResponse(authResult.error || 'UNAUTHORIZED')
  }
  
  const userId = authResult.user.id
  // Ë™çË®ºÊñπÊ≥ïÂà•„É¶„Éº„Ç∂„ÉºIDÂ§âÊèõ
  const actualUserId = extractUserIdFromPrefixed(userId)
  console.log('‚ö° È´òÈÄü„É¶„Éº„Ç∂„ÉºÂ∞ÇÁî®TodoÂèñÂæóÈñãÂßã:', { userId, actualUserId })
  
  const normalizeTodo = (todo: any) => {
    const normalizedTags = Array.isArray(todo.tags)
      ? todo.tags
      : (typeof todo.tags === 'string'
          ? todo.tags.split(',').map((t: string) => t.trim()).filter(Boolean)
          : [])

    return {
      id: todo.id,
      title: todo.title,
      description: todo.description || null,
      status: todo.status || (todo.completed ? 'DONE' : 'TODO'),
      priority: todo.priority || 'MEDIUM',
      dueDate: todo.dueDate ? new Date(todo.dueDate) : null,
      createdAt: new Date(todo.createdAt),
      updatedAt: new Date(todo.updatedAt),
      userId: todo.userId,
      category: todo.category || null,
      tags: normalizedTags,
    }
  }
  
  try {
    // „Ç≠„É£„ÉÉ„Ç∑„É•„Éê„Ç§„Éë„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
    const { searchParams } = new URL(request.url)
    const bypassCache = searchParams.get('cache') === 'false'
    
    // üì¶ Redis „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂèñÂæó„ÇíË©¶Ë°åÔºàNextAuth„ÅÆ„É¶„Éº„Ç∂„ÉºID„Çí„Ç≠„Éº„Å®„Åó„Å¶‰ΩøÁî®Ôºâ
    if (!bypassCache) {
      console.log('üì¶ Redis „Ç≠„É£„ÉÉ„Ç∑„É•Á¢∫Ë™ç‰∏≠...')
      const cachedTodos = await CacheManager.getTodos(userId)
      
      if (cachedTodos && cachedTodos.length >= 0) {
        // SWR: „Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂç≥Ëøî„Åó„Å§„Å§„ÄÅË£è„ÅßÊúÄÊñ∞Âåñ„ÇíË©¶Ë°å
        ;(async () => {
          try {
            const refreshStart = performance.now()
            const latest = await lambdaAPI.get(`/todos/user/${encodeURIComponent(actualUserId)}`, { timeout: 8000 })
            if (latest.success && Array.isArray(latest.data)) {
              const normalizedTodos = latest.data.map(normalizeTodo)
              await CacheManager.setTodos(userId, normalizedTodos, 300)
              console.log(`üîÑ SWR„É™„Éï„É¨„ÉÉ„Ç∑„É•ÂÆå‰∫Ü (${(performance.now()-refreshStart).toFixed(2)}ms):`, normalizedTodos.length)
            }
          } catch (e) {
            console.log('‚ö†Ô∏è SWR„É™„Éï„É¨„ÉÉ„Ç∑„É•Â§±Êïó:', e instanceof Error ? e.message : e)
          }
        })()
        const cacheTime = performance.now() - startTime
        console.log(`‚úÖ Redis „Ç≠„É£„ÉÉ„Ç∑„É•„Éí„ÉÉ„Éà (${cacheTime.toFixed(2)}ms):`, cachedTodos.length, '‰ª∂')
        
        const response = NextResponse.json(cachedTodos.map(todo => ({
          ...todo,
          dueDate: todo.dueDate ? new Date(todo.dueDate).toISOString() : null,
          createdAt: new Date(todo.createdAt).toISOString(),
          updatedAt: new Date(todo.updatedAt).toISOString()
        })))
        
        const securityHeaders = createSecurityHeaders()
        Object.entries(securityHeaders).forEach(([key, value]) => {
          response.headers.set(key, value)
        })
        response.headers.set('X-Cache-Status', 'stale')
        response.headers.set('X-Response-Time', `${cacheTime.toFixed(2)}ms`)
        
        return response
      }
      console.log('‚ùå Redis „Ç≠„É£„ÉÉ„Ç∑„É•„Éü„Çπ - Lambda APIÁµåÁî±„ÅßÂèñÂæó')
    }
    
    // üéØ ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüLambda „É¶„Éº„Ç∂„ÉºÂ∞ÇÁî®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Çí‰ΩøÁî®ÔºàÂÆüÈöõ„ÅÆ„É¶„Éº„Ç∂„ÉºID„ÅßÔºâ
    if (process.env.NODE_ENV !== 'production') {
      console.log('üöÄ LambdaÊúÄÈÅ©Âåñ„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÂëº„Å≥Âá∫„Åó:', `/todos/user/${actualUserId} (ÂÖÉID: ${userId})`)
    }
    const lambdaStart = performance.now()
    
    // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÁü≠Á∏ÆÔºà8ÁßíÔºâ„Åß„É¶„Éº„Ç∂„Éº‰ΩìÊÑü„ÇíÊîπÂñÑ
    const lambdaResponse = await lambdaAPI.get(`/todos/user/${encodeURIComponent(actualUserId)}`, { timeout: 8000 })
    const lambdaTime = performance.now() - lambdaStart
    
    if (process.env.NODE_ENV !== 'production') {
      console.log(`üì° Lambda API „É¨„Çπ„Éù„É≥„Çπ (${lambdaTime.toFixed(2)}ms):`, {
        success: lambdaResponse.success,
        hasData: !!lambdaResponse.data,
        dataLength: lambdaResponse.data ? lambdaResponse.data.length : 0,
        error: lambdaResponse.error
      })
    }
    
    if (!lambdaResponse.success || !Array.isArray(lambdaResponse.data)) {
      console.error('‚ùå Lambda APIÂ§±Êïó:', lambdaResponse.error)
      return NextResponse.json({
        error: 'Failed to fetch todos from upstream',
        details: lambdaResponse.error || 'Unknown error'
      }, { status: 502 })
    }
    
    // üõ°Ô∏è „Éá„Éº„Çø„Çµ„Éã„Çø„Ç§„Ç∫ (Date „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´Â§âÊèõ)
    const safeTodos = lambdaResponse.data.map(normalizeTodo)
    
    // ‚ö° È´òÈÄü„Ç≠„É£„ÉÉ„Ç∑„É•‰øùÂ≠ò (ÈùûÂêåÊúü)
    if (safeTodos.length >= 0) {
      const cacheStartTime = performance.now()
      
      // ÈùûÂêåÊúü„Åß„Ç≠„É£„ÉÉ„Ç∑„É•‰øùÂ≠òÔºà„É¨„Çπ„Éù„É≥„ÇπÈÄüÂ∫¶„Å´ÂΩ±Èüø„Åó„Å™„ÅÑÔºâ
      CacheManager.setTodos(userId, safeTodos, 300).then(() => {
        const cacheTime = performance.now() - cacheStartTime
        console.log(`üíæ „Ç≠„É£„ÉÉ„Ç∑„É•‰øùÂ≠òÂÆå‰∫Ü (${cacheTime.toFixed(2)}ms):`, safeTodos.length, '‰ª∂')
      }).catch(error => {
        console.log('‚ö†Ô∏è „Ç≠„É£„ÉÉ„Ç∑„É•‰øùÂ≠òÂ§±Êïó:', error.message)
      })
    }
    
    const totalTime = performance.now() - startTime
    if (process.env.NODE_ENV !== 'production') {
      const performanceLevel = totalTime < 500 ? 'üü¢ È´òÈÄü' : totalTime < 800 ? 'üü° ÊôÆÈÄö' : 'üî¥ Ë¶ÅÊîπÂñÑ'
      console.log(`‚úÖ „É¶„Éº„Ç∂„ÉºÂ∞ÇÁî®TodoÂèñÂæóÂÆå‰∫Ü (${totalTime.toFixed(2)}ms) ${performanceLevel}:`, {
        todoCount: safeTodos.length,
        lambdaTime: lambdaTime.toFixed(2) + 'ms',
        performance: performanceLevel
      })
    }
    
    // JSON „É¨„Çπ„Éù„É≥„ÇπÁî®„ÅÆ„Éá„Éº„ÇøÂ§âÊèõ (Êó•‰ªò„ÇíÊñáÂ≠óÂàó„Å´)
    const responseData = safeTodos.map(todo => ({
      ...todo,
      dueDate: todo.dueDate ? todo.dueDate.toISOString() : null,
      createdAt: todo.createdAt.toISOString(),
      updatedAt: todo.updatedAt.toISOString()
    }))
    
    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„ÉºË®≠ÂÆö
    const apiResponse = NextResponse.json(responseData)
    const securityHeaders = createSecurityHeaders()
    Object.entries(securityHeaders).forEach(([key, value]) => {
      apiResponse.headers.set(key, value)
    })
    apiResponse.headers.set('X-Cache-Status', 'fresh')
    apiResponse.headers.set('X-Response-Time', `${totalTime.toFixed(2)}ms`)
    apiResponse.headers.set('X-Lambda-Time', `${lambdaTime.toFixed(2)}ms`)
    
    return apiResponse
    
  } catch (error) {
    const totalTime = performance.now() - startTime
    console.error(`‚ùå „É¶„Éº„Ç∂„ÉºÂ∞ÇÁî®TodoÂèñÂæó„Ç®„É©„Éº (${totalTime.toFixed(2)}ms):`, error)
    
    return NextResponse.json({
      error: 'Internal Server Error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
