import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import bcrypt from 'bcryptjs'

export async function GET(request: NextRequest) {
  try {
    // 1. „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà
    await prisma.$queryRaw`SELECT 1`
    console.log('‚úÖ Database connection OK')

    // 2. „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        password: true, // „Éë„Çπ„ÉØ„Éº„Éâ„Éè„ÉÉ„Ç∑„É•„ÅÆÂ≠òÂú®Á¢∫Ë™ç
        createdAt: true
      }
    })

    console.log('üìä Users in database:', users.length)
    
    // 3. „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàêÔºàÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥ÂêàÔºâ
    const testEmail = 'test@example.com'
    let testUser = await prisma.user.findUnique({
      where: { email: testEmail }
    })

    if (!testUser) {
      console.log('üî® Creating test user...')
      const hashedPassword = await bcrypt.hash('password123', 12)
      
      testUser = await prisma.user.create({
        data: {
          email: testEmail,
          name: 'Test User',
          password: hashedPassword
        }
      })
      console.log('‚úÖ Test user created')
    }

    // 4. „Éë„Çπ„ÉØ„Éº„ÉâÊ§úË®º„ÉÜ„Çπ„Éà
    let passwordTestResult = false
    if (testUser.password) {
      passwordTestResult = await bcrypt.compare('password123', testUser.password)
      console.log('üîê Password validation test:', passwordTestResult)
    }

    return NextResponse.json({
      status: 'success',
      database: 'connected',
      totalUsers: users.length,
      testUser: {
        email: testUser.email,
        hasPassword: !!testUser.password,
        id: testUser.id,
        passwordTest: passwordTestResult
      },
      users: users.map(u => ({
        email: u.email,
        hasPassword: !!u.password,
        createdAt: u.createdAt
      }))
    })

  } catch (error) {
    console.error('‚ùå Test Auth Error:', error)
    return NextResponse.json({ 
      error: 'Database error',
      details: error.message 
    }, { status: 500 })
  }
}