'use client'

import { useState, useEffect, useCallback, useRef, startTransition } from 'react'
import { Priority } from '@prisma/client'
import type { TodoFilters, SavedSearch } from '@/types/todo'
import { DateRangePreset } from '@/lib/date-utils'
import { useFilterPersistence } from '../hooks/useFilterPersistence'
import { withScrollPreservation } from '../hooks/useScrollPreservation'
import { usePageMovementDebugger } from '../hooks/usePageMovementDebugger'

interface TodoFiltersProps {
  filter: TodoFilters
  onFilterChange: (filter: TodoFilters) => void
  onManualSearch?: () => void
  enablePersistence?: boolean
}

const _priorityLabels = {
  LOW: '‰Ωé',
  MEDIUM: '‰∏≠',
  HIGH: 'È´ò',
  URGENT: 'Á∑äÊÄ•',
}

export default function TodoFilters({ filter, onFilterChange, onManualSearch, enablePersistence = true }: TodoFiltersProps) {
  const [savedSearches, setSavedSearches] = useState<SavedSearch[]>([])
  const [showSaveDialog, setShowSaveDialog] = useState(false)
  const [saveSearchName, setSaveSearchName] = useState('')
  const [showAdvanced, setShowAdvanced] = useState(false)
  // uncontrolled input„ÅÆref
  const uncontrolledTagInputRef = useRef<HTMLInputElement>(null)
  const uncontrolledSearchInputRef = useRef<HTMLInputElement>(null)
  const uncontrolledCategoryInputRef = useRef<HTMLInputElement>(null)
  // debounceÁî®„ÅÆ„Çø„Ç§„Éû„Éº
  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null)
  
  // „Éï„Ç£„É´„Çø„ÉºÊ∞∏Á∂öÂåñ„Éï„ÉÉ„ÇØ
  const { persistFilters, loadPersistedFilters, clearPersistedFilters } = useFilterPersistence()
  
  // „Éá„Éê„ÉÉ„Ç∞„Éï„ÉÉ„ÇØÔºàÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„ÅøÊúâÂäπÔºâ
  // Ê≥®ÊÑè: Êù°‰ª∂‰ªò„ÅçhookÂëº„Å≥Âá∫„Åó„ÅØÈÅø„Åë„ÄÅhooksÂÜÖ„ÅßÊù°‰ª∂ÂàÜÂ≤ê„Åï„Åõ„Çã
  usePageMovementDebugger()

  // ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢„ÅÆÁä∂ÊÖãÂ§âÊõ¥„Çí„Éá„Éê„ÉÉ„Ç∞ÔºàÊúÄÈÅ©ÂåñÔºâ
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢stateÂ§âÊõ¥:', savedSearches.length, '‰ª∂')
      if (savedSearches.length > 0) {
        console.log('üìù Ë©≥Á¥∞:', savedSearches.map(s => ({ id: s.id, name: s.name })))
      }
    }
  }, [savedSearches]) // savedSearches„ÇíÁõ£Ë¶ñ


  // ÂàùÊúüÂåñÂá¶ÁêÜÔºà‰∏ÄÂ∫¶„ÅÆ„ÅøÂÆüË°åÔºâ
  useEffect(() => {
    // ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢„ÇíË™≠„ÅøËæº„Åø
    const initSavedSearches = async () => {
      try {
        if (process.env.NODE_ENV === 'development') {
          console.log('üîÑ ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢„ÇíÂàùÊúüÂåñ‰∏≠...')
        }
        const response = await fetch('/api/todos/saved-searches')
        if (response.ok) {
          const data = await response.json()
          if (process.env.NODE_ENV === 'development') {
            console.log('üìã ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢ÂàùÊúüÂåñÂÆå‰∫Ü:', data.length, '‰ª∂')
          }
          setSavedSearches(data)
        }
      } catch (error) {
        console.error('‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó:', error)
      }
    }

    // Ê§úÁ¥¢Â±•Ê≠¥„ÇíË™≠„ÅøËæº„Åø
    const initSearchHistory = async () => {
      try {
        const response = await fetch('/api/todos/search-history?limit=10')
        if (response.ok) {
          // TODO: Add searchHistory state if needed
          await response.json()
        }
      } catch (error) {
        console.error('Ê§úÁ¥¢Â±•Ê≠¥„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó:', error)
      }
    }

    // Ê∞∏Á∂öÂåñ„Åï„Çå„Åü„Éï„Ç£„É´„Çø„Éº„ÇíË™≠„ÅøËæº„Åø
    const initPersistedFilters = () => {
      if (enablePersistence) {
        const persistedFilters = loadPersistedFilters()
        if (Object.keys(persistedFilters).length > 0) {
          onFilterChange(persistedFilters)
          
          // uncontrolled input„ÅÆÂÄ§„ÇÇÊõ¥Êñ∞
          setTimeout(() => {
            if (uncontrolledTagInputRef.current && persistedFilters.tags) {
              uncontrolledTagInputRef.current.value = persistedFilters.tags.join(', ')
            }
            if (uncontrolledSearchInputRef.current && persistedFilters.search) {
              uncontrolledSearchInputRef.current.value = persistedFilters.search
            }
            if (uncontrolledCategoryInputRef.current && persistedFilters.category) {
              uncontrolledCategoryInputRef.current.value = persistedFilters.category
            }
          }, 0)
        }
      }
    }

    // ÂàùÊúüÂåñÂá¶ÁêÜ„ÇíÂÆüË°å
    initSavedSearches()
    initSearchHistory()
    initPersistedFilters()
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []) // ‰æùÂ≠òÈÖçÂàó„ÇíÁ©∫„Å´„Åó„Å¶ÂàùÂõû„ÅÆ„ÅøÂÆüË°åÔºàÊÑèÂõ≥ÁöÑÔºâ

  // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç¢„É≥„Éû„Ç¶„É≥„ÉàÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    return () => {
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current)
      }
    }
  }, [])


  const handleCompletedFilter = withScrollPreservation((completed?: boolean) => {
    startTransition(() => {
      const newFilter = { ...filter, completed }
      onFilterChange(newFilter)
      if (enablePersistence) {
        persistFilters(newFilter)
      }
    })
  })

  const handlePriorityFilter = withScrollPreservation((priority?: Priority) => {
    startTransition(() => {
      const newFilter = { ...filter, priority }
      onFilterChange(newFilter)
      if (enablePersistence) {
        persistFilters(newFilter)
      }
    })
  })

  // Âç≥Â∫ß„Å´ÂÆüË°å„Åô„ÇãÊ§úÁ¥¢Â§âÊõ¥„Éè„É≥„Éâ„É©„ÉºÔºà„Çπ„ÇØ„É≠„Éº„É´‰ΩçÁΩÆ‰øùÊåÅ‰ªò„ÅçÔºâ
  const handleSearchChangeImmediate = useCallback((search: string) => {
    withScrollPreservation(() => {
      startTransition(() => {
        const newFilter = { ...filter, search: search || undefined }
        onFilterChange(newFilter)
        if (enablePersistence) {
          persistFilters(newFilter)
        }
      })
    })()
  }, [filter, onFilterChange, enablePersistence, persistFilters])

  // debounceÁâà„ÅÆÊ§úÁ¥¢Â§âÊõ¥„Éè„É≥„Éâ„É©„ÉºÔºàuncontrolled inputÁî®Ôºâ
  const debouncedHandleSearchChange = (search: string) => {
    if (debounceTimerRef.current) {
      clearTimeout(debounceTimerRef.current)
    }
    
    debounceTimerRef.current = setTimeout(() => {
      handleSearchChangeImmediate(search)
    }, 300) // 300msÂæÖÊ©ü
  }

  const handleCategoryChangeImmediate = useCallback((category: string) => {
    withScrollPreservation(() => {
      startTransition(() => {
        const newFilter = { ...filter, category: category || undefined }
        onFilterChange(newFilter)
        if (enablePersistence) {
          persistFilters(newFilter)
        }
      })
    })()
  }, [filter, onFilterChange, enablePersistence, persistFilters])

  // debounceÁâà„ÅÆ„Ç´„ÉÜ„Ç¥„É™Êõ¥Êñ∞Èñ¢Êï∞Ôºàuncontrolled inputÁî®Ôºâ
  const debouncedHandleCategoryChange = (category: string) => {
    if (debounceTimerRef.current) {
      clearTimeout(debounceTimerRef.current)
    }
    
    debounceTimerRef.current = setTimeout(() => {
      handleCategoryChangeImmediate(category)
    }, 300) // 300msÂæÖÊ©ü
  }

  const handleTagsChange = withScrollPreservation((tagsString: string) => {
    startTransition(() => {
      // „Ç´„É≥„Éû„ÇíÂê´„ÇÄÊñáÂ≠óÂàó„ÅÆÂá¶ÁêÜ
      const tags = tagsString.trim() ? 
        tagsString.split(',').map(tag => tag.trim()).filter(Boolean) : 
        undefined
      const newFilter = { ...filter, tags }
      onFilterChange(newFilter)
      if (enablePersistence) {
        persistFilters(newFilter)
      }
    })
  })

  // debounceÁâà„ÅÆ„Çø„Ç∞Êõ¥Êñ∞Èñ¢Êï∞ÔºàÁõ¥Êé•ÂÖ•ÂäõÁî®Ôºâ
  const debouncedHandleTagsChange = (tagsString: string) => {
    if (debounceTimerRef.current) {
      clearTimeout(debounceTimerRef.current)
    }
    
    debounceTimerRef.current = setTimeout(() => {
      handleTagsChange(tagsString)
    }, 300) // 300msÂæÖÊ©ü
  }

  const handleDateRangeChange = withScrollPreservation((dateRange?: DateRangePreset) => {
    startTransition(() => {
      const newFilter = { ...filter, dateRange }
      onFilterChange(newFilter)
      if (enablePersistence) {
        persistFilters(newFilter)
      }
    })
  })

  const saveCurrentSearch = async () => {
    if (!saveSearchName.trim()) return

    // ÂêåÂêç„ÅÆÊ§úÁ¥¢Êù°‰ª∂„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const existingSearch = savedSearches.find(search => 
      search.name.toLowerCase() === saveSearchName.trim().toLowerCase()
    )
    
    if (existingSearch) {
      alert(`„Äå${saveSearchName.trim()}„Äç„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆÊ§úÁ¥¢Êù°‰ª∂„ÅØÊó¢„Å´Â≠òÂú®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÂà•„ÅÆÂêçÂâç„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`)
      return
    }

    try {
      if (process.env.NODE_ENV === 'development') {
        console.log('üíæ Ê§úÁ¥¢„Çí‰øùÂ≠ò‰∏≠:', saveSearchName.trim())
        console.log('üì¶ ‰øùÂ≠ò„Åô„Çã„Éï„Ç£„É´„Çø„Éº:', JSON.stringify(filter))
      }
      const filtersToSave = JSON.stringify(filter)
      
      const response = await fetch('/api/todos/saved-searches', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: saveSearchName.trim(),
          filters: filtersToSave
        })
      })
      
      if (response.ok) {
        const newSavedSearch = await response.json()
        if (process.env.NODE_ENV === 'development') {
          console.log('‚úÖ Ê§úÁ¥¢‰øùÂ≠òÊàêÂäü:', newSavedSearch)
        }
        // Âç≥ÊôÇÂèçÊò†: Êñ∞„Åó„ÅÑ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢„Çí„É™„Çπ„Éà„Å´ËøΩÂä†
        setSavedSearches(prev => {
          const updated = [newSavedSearch, ...prev]
          if (process.env.NODE_ENV === 'development') {
            console.log('üìã Êõ¥Êñ∞Âæå„ÅÆ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢Êï∞:', updated.length)
          }
          return updated
        })
        
        setShowSaveDialog(false)
        setSaveSearchName('')
      } else {
        console.error('Failed to save search:', response.status)
        alert('Ê§úÁ¥¢„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }
    } catch (error) {
      console.error('Failed to save search:', error)
      alert('Ê§úÁ¥¢„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    }
  }

  const loadSavedSearch = (savedSearch: SavedSearch) => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üìñ ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢„ÇíË™≠„ÅøËæº„Åø:', savedSearch.name)
    }
    const filters = JSON.parse(savedSearch.filters) as TodoFilters
    
    onFilterChange(filters)
    
    // uncontrolled input„ÅÆÂÄ§„ÇíÊâãÂãïÊõ¥Êñ∞
    if (uncontrolledTagInputRef.current) {
      uncontrolledTagInputRef.current.value = filters.tags?.join(', ') || ''
    }
    if (uncontrolledSearchInputRef.current) {
      uncontrolledSearchInputRef.current.value = filters.search || ''
    }
    if (uncontrolledCategoryInputRef.current) {
      uncontrolledCategoryInputRef.current.value = filters.category || ''
    }
    
    // Ëá™ÂãïÊ§úÁ¥¢„ÅØÂÆüË°å„Åõ„Åö„ÄÅ„Éï„Ç£„É´„Çø„ÉºÊù°‰ª∂„ÅÆ„ÅøË™≠„ÅøËæº„Åø
    // „É¶„Éº„Ç∂„Éº„ÅåÊâãÂãï„ÅßÊ§úÁ¥¢„Éú„Çø„É≥„ÇíÊäº„Åô„Åæ„ÅßÂæÖÊ©ü
  }

  const deleteSavedSearch = async (id: string, name: string) => {
    if (!confirm(`„Äå${name}„Äç„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü`)) {
      return
    }

    // Ê•ΩË¶≥ÁöÑUIÊõ¥Êñ∞ÔºöÂç≥Â∫ß„Å´UI„Åã„ÇâÂâäÈô§
    setSavedSearches(prev => prev.filter(search => search.id !== id))

    // Ê§úÁ¥¢Êù°‰ª∂ÂâäÈô§Âæå„ÄÅ„Éï„Ç£„É´„Çø„Éº„Çí„ÇØ„É™„Ç¢Áä∂ÊÖã„Å´„Åô„Çã
    clearFilters()

    // „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂâäÈô§APIÂëº„Å≥Âá∫„ÅóÔºàUI„ÅØ„Åô„Åß„Å´Êõ¥Êñ∞Ê∏à„ÅøÔºâ
    fetch(`/api/todos/saved-searches/${id}`, { method: 'DELETE' })
      .catch(() => {
        // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇUI„ÅØÊõ¥Êñ∞Ê∏à„Åø„Å™„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„ÅÑ
        // 404„Ç®„É©„Éº„ÇÑ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
      })
  }

  const clearFilters = () => {
    console.log('üßπ „Éï„Ç£„É´„Çø„Éº„ÇØ„É™„Ç¢')
    const emptyFilter = {}
    onFilterChange(emptyFilter)
    
    // uncontrolled input„ÇÇ„ÇØ„É™„Ç¢
    if (uncontrolledTagInputRef.current) {
      uncontrolledTagInputRef.current.value = ''
    }
    if (uncontrolledSearchInputRef.current) {
      uncontrolledSearchInputRef.current.value = ''
    }
    if (uncontrolledCategoryInputRef.current) {
      uncontrolledCategoryInputRef.current.value = ''
    }
    
    // Ê∞∏Á∂öÂåñ„Éá„Éº„Çø„ÇÇ„ÇØ„É™„Ç¢
    if (enablePersistence) {
      clearPersistedFilters()
    }
  }

  const hasActiveFilters = Object.keys(filter).some(key =>
    filter[key as keyof TodoFilters] !== undefined &&
    filter[key as keyof TodoFilters] !== '' &&
    !(Array.isArray(filter[key as keyof TodoFilters]) && (filter[key as keyof TodoFilters] as unknown[]).length === 0)
  )

  return (
    <div className="bg-white dark:bg-gray-800 p-3 sm:p-4 rounded-lg shadow-md dark:shadow-gray-900/50 space-y-3 sm:space-y-4 border border-gray-200 dark:border-gray-700">
      {/* „Éò„ÉÉ„ÉÄ„Éº - „É¢„Éê„Ç§„É´ÂØæÂøú */}
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2">
        <h3 className="text-base sm:text-lg font-medium text-gray-900 dark:text-gray-100">üîç Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„Éº</h3>
        <div className="flex items-center flex-wrap gap-2">
          {hasActiveFilters && (
            <>
              <button
                onClick={() => setShowSaveDialog(true)}
                className="px-2 py-1 text-xs sm:text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors bg-blue-50 dark:bg-blue-900/20 rounded"
              >
                üíæ ‰øùÂ≠ò
              </button>
              <button
                onClick={clearFilters}
                className="px-2 py-1 text-xs sm:text-sm text-purple-600 hover:text-purple-800 dark:text-purple-400 dark:hover:text-purple-300 transition-colors bg-purple-50 dark:bg-purple-900/20 rounded"
              >
                üßπ „ÇØ„É™„Ç¢
              </button>
            </>
          )}
          <button
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="px-2 py-1 text-xs sm:text-sm text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-300 transition-colors bg-gray-50 dark:bg-gray-900/20 rounded"
          >
            {showAdvanced ? 'üìã Âü∫Êú¨' : 'üîß Ë©≥Á¥∞'}
          </button>
        </div>
      </div>

      {/* „É°„Ç§„É≥Ê§úÁ¥¢„Éï„Ç£„Éº„É´„Éâ - ‰øÆÊ≠£Ê∏à„Åø */}
      <div className="space-y-3">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            üìù „Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢
          </label>
          <div className="flex gap-2">
            <input
              ref={uncontrolledSearchInputRef}
              type="text"
              defaultValue={filter.search || ''}
              onChange={(e) => {
                debouncedHandleSearchChange(e.target.value)
              }}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  handleSearchChangeImmediate(e.currentTarget.value) // EnterÊôÇ„ÅØÂç≥Â∫ß„Å´Ê§úÁ¥¢ÂÆüË°å
                  onManualSearch?.()
                }
              }}
              placeholder="„Çø„Ç§„Éà„É´„ÇÑË™¨ÊòéÊñá„ÅßÊ§úÁ¥¢..."
              className="flex-1 rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-gray-100"
            />
            <button
              onClick={() => {
                const currentValue = uncontrolledSearchInputRef.current?.value || ''
                handleSearchChangeImmediate(currentValue) // ÊâãÂãïÊ§úÁ¥¢„Éú„Çø„É≥„ÅØÂç≥Â∫ß„Å´ÂÆüË°å
                onManualSearch?.()
              }}
              className="px-3 py-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white text-sm font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              üîç Ê§úÁ¥¢
            </button>
          </div>
        </div>
      </div>

      {/* Âü∫Êú¨„Éï„Ç£„É´„Çø„Éº */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
        {/* ÂÆå‰∫ÜÁä∂ÊÖã */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">‚úÖ ÂÆå‰∫ÜÁä∂ÊÖã</label>
          <select
            value={filter.completed === undefined ? '' : filter.completed.toString()}
            onChange={(e) => {
              const value = e.target.value === '' ? undefined : e.target.value === 'true'
              handleCompletedFilter(value)
            }}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            <option value="">„Åô„Åπ„Å¶</option>
            <option value="false">Êú™ÂÆå‰∫Ü„ÅÆ„Åø</option>
            <option value="true">ÂÆå‰∫ÜÊ∏à„Åø„ÅÆ„Åø</option>
          </select>
        </div>

        {/* ÂÑ™ÂÖàÂ∫¶ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">‚ö° ÂÑ™ÂÖàÂ∫¶</label>
          <select
            value={filter.priority || ''}
            onChange={(e) => {
              const value = e.target.value as Priority || undefined
              handlePriorityFilter(value)
            }}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            <option value="">„Åô„Åπ„Å¶</option>
            <option value="URGENT">üî• Á∑äÊÄ•</option>
            <option value="HIGH">üî¥ È´ò</option>
            <option value="MEDIUM">üü° ‰∏≠</option>
            <option value="LOW">üîµ ‰Ωé</option>
          </select>
        </div>

        {/* Êó•‰ªòÁØÑÂõ≤ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">üìÖ ÊúüÈôê</label>
          <select
            value={filter.dateRange || ''}
            onChange={(e) => {
              const value = e.target.value as DateRangePreset || undefined
              handleDateRangeChange(value)
            }}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          >
            <option value="">„Åô„Åπ„Å¶</option>
            <option value="overdue">üìÖ ÊúüÈôêÂàá„Çå</option>
            <option value="today">üìÖ ‰ªäÊó•</option>
            <option value="tomorrow">üìÖ ÊòéÊó•</option>
            <option value="this_week">üìÖ ‰ªäÈÄ±</option>
            <option value="next_week">üìÖ Êù•ÈÄ±</option>
            <option value="this_month">üìÖ ‰ªäÊúà</option>
            <option value="next_month">üìÖ Êù•Êúà</option>
            <option value="no_due_date">üìÖ ÊúüÈôê„Å™„Åó</option>
          </select>
        </div>
      </div>

      {/* Ë©≥Á¥∞„Éï„Ç£„É´„Çø„ÉºÔºàÂ±ïÈñãÊôÇ„ÅÆ„ÅøË°®Á§∫Ôºâ */}
      {showAdvanced && (
        <div className="pt-3 border-t border-gray-200 dark:border-gray-600 space-y-3">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {/* „Ç´„ÉÜ„Ç¥„É™ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">üìÇ „Ç´„ÉÜ„Ç¥„É™</label>
              <input
                ref={uncontrolledCategoryInputRef}
                type="text"
                defaultValue={filter.category || ''}
                onChange={(e) => debouncedHandleCategoryChange(e.target.value)}
                placeholder="‰ªï‰∫ã„ÄÅ„Éó„É©„Ç§„Éô„Éº„Éà„Å™„Å©"
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
              />
            </div>

            {/* „Çø„Ç∞ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                üè∑Ô∏è „Çø„Ç∞Ôºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ
              </label>
              <input
                ref={uncontrolledTagInputRef}
                type="text"
                defaultValue={filter.tags?.join(', ') || ''}
                onChange={(e) => debouncedHandleTagsChange(e.target.value)}
                placeholder="ÈáçË¶Å, ‰ºöË≠∞, „É¨„Éì„É•„Éº„Å™„Å©"
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
              />
            </div>
          </div>
        </div>
      )}

      {/* ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢ */}
      {savedSearches.length > 0 && (
        <div className="pt-3 border-t border-gray-200 dark:border-gray-600">
          <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">üíæ ‰øùÂ≠òÊ∏à„ÅøÊ§úÁ¥¢</h4>
          <div className="flex flex-wrap gap-2">
            {savedSearches.map(savedSearch => (
              <div key={savedSearch.id} className="flex items-center bg-gray-100 dark:bg-gray-700 rounded">
                <button
                  onClick={() => loadSavedSearch(savedSearch)}
                  className="px-3 py-1 text-sm text-gray-700 dark:text-gray-300 rounded-l hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                >
                  {savedSearch.name}
                </button>
                <button
                  onClick={() => deleteSavedSearch(savedSearch.id, savedSearch.name)}
                  className="px-2 py-1 text-sm text-red-600 dark:text-red-400 rounded-r hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors"
                  title="ÂâäÈô§"
                >
                  √ó
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Ê§úÁ¥¢‰øùÂ≠ò„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      {showSaveDialog && (
        <div className="pt-3 border-t border-gray-200 dark:border-gray-600">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
              üíæ Ê§úÁ¥¢Êù°‰ª∂„Çí‰øùÂ≠ò
            </label>
            <div className="flex gap-2">
              <input
                type="text"
                value={saveSearchName}
                onChange={(e) => setSaveSearchName(e.target.value)}
                placeholder="Ê§úÁ¥¢Êù°‰ª∂„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ"
                className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && saveSearchName.trim()) {
                    saveCurrentSearch()
                  }
                }}
              />
              <button
                onClick={saveCurrentSearch}
                disabled={!saveSearchName.trim()}
                className="px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                ‰øùÂ≠ò
              </button>
              <button
                onClick={() => {
                  setShowSaveDialog(false)
                  setSaveSearchName('')
                }}
                className="px-4 py-2 text-sm bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
              >
                „Ç≠„É£„É≥„Çª„É´
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}